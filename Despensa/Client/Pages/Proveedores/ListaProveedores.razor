@page "/Proveedores"
@inject IHttpService http
@inject NavigationManager navigationManager
@using Despensa.BD.Datos.Entidades
@using Despensa.Client.Servicios



     <br />
         <br />

          <h3>Lista de Proveedores</h3>

        <a class="btn btn-primary" href="Proveedores/Crear">Nuevo proveedor</a>

     <br />
       <br />




<table>
    <tr>

        <th>Nombre</th>


        <th>Correo</th>


        <th>Telefono</th>

       
        <th>Administrador</th>



    </tr>

    @if (proveedores == null)
    {
        <tr>Cargando.......</tr>
    }
    else if (proveedores.Count == 0)
    {
        <tr>No existen datos</tr>
    }
    else
    {
        @foreach (var item in proveedores)
        {
            <tr>
                <td>@item.Nombre</td>

                <td>@item.CorreoElectronico</td>

                <td>@item.NumeroTelefono</td>

                <td>
                    <a class="btn btn-primary"
               href="Proveedores/Editar/@item.Id">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-warning"
                    @onclick="()=>Eliminar(item)">
                        Borrar
                    </button>
                </td>
            </tr>
        }
    }
</table>
 
   <br />
      <br />


     <h3>Lista de productos del proveedor</h3>

              <a class="btn btn-primary" href="Productos/Crear">Lista productos</a>

        <br />
         <br />



<table>
    <tr>

        <th>Nombre Producto</th>

        <th>Descripcion</th>

        <th>Fecha vencimiento</th>

        <th>Precio</th>



    </tr>

    @if (productos == null)
    {
        <tr>Cargando.......</tr>
    }
    else if (productos.Count == 0)
    {
        <tr>No existen datos</tr>
    }
    else
    {
        @foreach (var item in productos)
        {
            <tr>

                <td>@item.NombreProducto</td>

                <td>@item.DescripcionProducto</td>

                <td>@item.FechaVencimiento</td>

                <td>@item.PrecioProducto</td>

            </tr>
        }
    }
</table>



<Confirmacion @ref="confirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Ok"
              Titulo="Borrar proveedor"
              onCancel="Cancelar"
              onConfirm="Borrar">
    <div>
        Está por borrar el proveedor @ProveedorBorrar.Id
        <br />
        ¿Quiere continuar con la operación?
    </div>
</Confirmacion>


@code {

    List<Proveedor> proveedores;

    List<Producto> productos;

    Confirmacion confirmacion;

    Proveedor ProveedorBorrar;

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerProveedores();
        await LeerProductos();
    }

    private async Task LeerProveedores()
    {
        var respuesta = await http.Get<List<Proveedor>>("api/Proveedores");
        if (!respuesta.Error)
        {
            proveedores = respuesta.Respuesta;
        }
    }


    private async Task LeerProductos()
    {
        var respuesta = await http.Get<List<Producto>>("api/Productos");
        if (!respuesta.Error)
        {
            productos = respuesta.Respuesta;
        }
    }


    private void Eliminar(Proveedor proveedorBorrar)
    {
        ProveedorBorrar = proveedorBorrar;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        ProveedorBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Proveedores/{ProveedorBorrar.Id}");
        if (respuesta.Error)
 
        Cancelar();
        await LeerProveedores();
    }
}