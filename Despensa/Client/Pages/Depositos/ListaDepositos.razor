@page "/Depositos"
@inject IHttpService http

<h3>Lista de Depositos</h3>

<a class="btn btn-primary" href="Depositos/Crear">Nuevo deposito</a>


<style>
    th, td {
        border: solid 1px red;
        padding: 30px;
    }

    thead {
        background-color: #545554;
        border-bottom: 4px solid yellow;
        color: darkgreen;
    }
</style>



<table>
    <tr>
        <th>Codigo</th>
        <th>Categoria</th>
        <th>Cantidad</th>
        <th>Minimo</th>

    </tr>

    @if (depositos == null)
    {
        <tr>Cargando.......</tr>
    }
    else if (depositos.Count == 0)
    {
        <tr>No existen datos</tr>
    }
    else
    {
        @foreach (var item in depositos)
        {
            <tr>
                <td>@item.CodigoEstante</td>
                <td>@item.CategoriaEnEstante</td>
                <td>@item.CantidadEnEstante</td>
                <td>@item.UnidadMinima</td>
                <td>
                    <a class="btn btn-primary"
               href="Depositos/Editar/@item.Id">
                        Editar
                    </a>
                </td>
                <td>
                    <button class="btn btn-warning"
                    @onclick="()=>Eliminar(item)">
                        Borrar
                    </button>
                </td>
            </tr>
        }
    }
</table>

<Confirmacion @ref="confirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Ok"
              Titulo="Borrar el deposito"
              onCancel="Cancelar"
              onConfirm="Borrar">
    <div>
        Está por borrar el deposito @DepositoBorrar.CodigoEstante @DepositoBorrar.CategoriaEnEstante @DepositoBorrar.CantidadEnEstante @DepositoBorrar.UnidadMinima
        <br />
        ¿Quiere continuar con la operación?
    </div>
</Confirmacion>


@code {
    List<Deposito> depositos;
    Confirmacion confirmacion;
    Deposito DepositoBorrar;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var respuesta = await http.Get<List<Deposito>>("api/Depositos");
        if (!respuesta.Error)
        {
            depositos = respuesta.Respuesta;
        }
    }

    private void Eliminar(Deposito depositoBorrar)
    {
        DepositoBorrar = depositoBorrar;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        DepositoBorrar = null;
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Depositos/{DepositoBorrar.Id}");
        if (respuesta.Error)
        {
            var body = "Error";
        }
        Cancelar();
        await Leer();
    }
}